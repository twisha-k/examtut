# -*- coding: utf-8 -*-
"""tutor_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QkhlEIgh26v1ZwMVcxdJtFPsVzHdiS1P
"""

#!pip install streamlit

#!pip install langchain_google_genai

#!pip install PyPDF2 python-docx

import os
import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

from PyPDF2 import PdfReader
from docx import Document

# üîê Set Gemini API key
os.environ["GOOGLE_API_KEY"] = st.secrets["AIzaSyBj54mjn984cSbomw_P-mjyYAyGWMxXsdg"]

# Initialize LLM
llm = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.5)

def extract_text_from_file(uploaded_file):
    if uploaded_file.type == "application/pdf":
        pdf = PdfReader(uploaded_file)
        text = "".join([page.extract_text() or "" for page in pdf.pages])
        return text
    elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        doc = Document(uploaded_file)
        return "\n".join([p.text for p in doc.paragraphs])
    elif uploaded_file.type == "text/plain":
        return uploaded_file.read().decode("utf-8")
    else:
        return None

file_prompt = PromptTemplate(
    input_variables=["user_instruction", "file_content"],
    template="""
You are an exam preparation tutor.

Based on the following instruction: "{user_instruction}"

Use the provided syllabus or notes below to generate useful study content:

----- Start of Uploaded Notes -----
{file_content}
----- End of Notes -----

Respond clearly and helpfully.
"""
)

file_chain = LLMChain(llm=llm, prompt=file_prompt)

st.set_page_config(page_title="üìö Exam Prep Tutor RAG", page_icon="üß†")
st.title("üìö Exam Prep Tutor with File Upload")

st.markdown("""
Upload your syllabus or notes (PDF, TXT, or DOCX), and ask the chatbot to generate:
- üìÑ Exam questions
- ‚ùì Viva questions
- üß† Explanations
- üìö Summaries
""")

# File upload
uploaded_file = st.file_uploader("Upload your notes or syllabus file", type=["pdf", "txt", "docx"])

user_instruction = st.text_input("What do you want the bot to do with this content?",
                                  placeholder="e.g., Generate 5 exam questions from these notes.")

if st.button("Generate from File"):
    if uploaded_file and user_instruction:
        with st.spinner("Reading and generating..."):
            file_content = extract_text_from_file(uploaded_file)
            if file_content:
                output = file_chain.run(user_instruction=user_instruction, file_content=file_content[:8000])  # limit input size
                st.success("Here's the result:")
                st.markdown(output)
            else:
                st.error("Unsupported file format or reading error.")
    else:
        st.warning("Please upload a file and enter an instruction.")